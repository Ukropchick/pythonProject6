"""

Regex - это регулярные выражения, часто используются для нахождения суб-строки по заданному формату

"""

# ФАЙЛ НЕ РЕФОРМАТИРОВАТЬ!

"""

2 безумно удобных конструктора регекса для отладки в режиме реального времени

https://regex101.com/
https://regexr.com/

"""

# А теперь перейдем к основным обозначениям в регексе:

"""
Специальные символы

.       Задает один произвольный симовл
[]      Заменяет символ из квадратных скобок
-       Задает один симовл, которого не должно быть в скобках
[^ ]    Задает один символ из не содержащихся в скобках
^       Обозначанет начало последовательности
$       Обозначает конец строки
*       Обозначает произвольное количество повторений одного символа (0 или много)
?       Обозначает одно повторение одного символа (0 или 1)
+       Обозначает одно или большее повторение символа
|       Логическое ИЛИ
()      Группирует символы внутри
{}      Указывает число повторений предыдущего символа
\       Экранирование. Для использования специальных симоволов в качестве обычных

"""

"""
Конструкции

\d — соответствует любой одной цифре и заменяет собой выражение [0-9];
\D — исключает все цифры и заменяет [^0-9];
\w — заменяет любую цифру, букву, а также знак нижнего подчёркивания;
\W — любой символ кроме латиницы, цифр или нижнего подчёркивания;
\s — соответствует любому пробельному символу;
\S — описывает любой непробельный символ.


\t   —   табуляция,
\n   —   новая строка, 
\r   —   возврат каретки (два последних символа унаследованы компьютерами от эпохи пишущих машинок,
         когда для начала печати с новой строки необходимо было выполнить два действия — возврат каретки в начало 
         строки и перевод каретки на новую строку)

\s   —   произвольный вид пробела (пробел, табуляция, новая строка, возврат каретки)
\d   —   произвольная цифра, аналог [0-9]
\w   —   произвольный "символ в слове", обычно аналог [a-zA-z0-9], то есть, латинская буква или цифра
\S   —   НЕ пробел, \D   —   НЕ цифра, \W    —   НЕ "символ в слове"


"""

"""
Примеры

[0123456789]                                любая цифра
[aeiouy]                                    любая буква из перечисленных
[~!@#$%^&*+-]                               любой символ из перечисленных

[^0123456789]                               всё, что угодно, кроме цифры
[^a-z]                                      всё, что угодно, кроме строчной латинской буквы
[^-az]                                      всё, что угодно, кроме -, a, z

^def                                        def в начале строки
\.$                                         точка в конце строки
^Kotlin is great as the first language!$    ВСЯ строка с заданной фразой (и более ничем)

Марат|Михаил                                Марат или Михаил
^\[|\]$                                     открывающая квадратная скобка в начале строки или закрывающая в конце

.*                                          любое количество (в том числе ноль) любых символов
(Марат)+                                    строка Марат один или более раз (но не ноль)
(Михаил)?                                   строка Михаил ноль или один раз
([0-9]{4})                                  последовательность из ровно четырёх любых цифр
\w{8,16}                                    последовательность из 8-16 "символов в слове"

(Kotlin)+AsFirst                            KotlinAsFirst, KotlinKotlinAsFirst, KotlinKotlinKotlinAsFirst,
(?:\$\$)+                                   `, ``, `
(\w+)\s\1                                   слово, за которым следует пробел и то же самое слово

Здесь \1 (\2, \3, …) ищет уже описанную группу поиска по её номеру внутри регулярного выражения 
(в данном случае - первую группу). Комбинация (?:…) задаёт группу поиска без номера. 
В целом, (?…) задаёт группы особого поиска:

Марат(?=\sАхин)                             Марат, за которым следует пробел и Ахин
(?<=Михаил\s)Глухих                         Глухих, перед которым стоит Михаил с пробелом
\d+(?![$\d])                                число, после которого НЕ стоит знак доллара
(?<!root\s)beer                             beer, перед которым НЕ стоит root с пробелом
"""

# ДЕЙСТВИЯ С РЕГЕКСАМИ!

import re

"""

re.search(pattern, string)                  Найти в строке string первую строчку, подходящую под шаблон pattern;
re.fullmatch(pattern, string)               Проверить, подходит ли строка string под шаблон pattern;
re.split(pattern, string, maxsplit=0)       Аналог str.split(), только разделение происходит по подстрокам, подходящим 
                                            под шаблон pattern;
re.findall(pattern, string)                 Найти в строке string все непересекающиеся шаблоны pattern;
re.finditer(pattern, string)                Итератор всем непересекающимся шаблонам pattern в строке string 
                                            (выдаются match-объекты);
re.sub(pattern, repl, string, count=0)      Заменить в строке string все непересекающиеся шаблоны pattern на repl;

"""

"""

Примеры!
для использования "сырой строки" в питоне стаят символ r перед кавычками

"""
match = re.search(r'\d\d\D\d\d', r'Телефон 123-12-12')
print(match[0] if match else 'Not found')
# -> 23-12
print(match)
# -> 23-12 выдаст ссылку на объект
try:
    print(match[1])
except IndexError as error:
    print("IndexError!", error)
# -> IndexError: no such group

match = re.search(r'\d\d\D\d\d', r'Телефон 1231212')
print(match[0] if match else 'Not found')
# -> Not found

match = re.fullmatch(r'\d\d\D\d\d', r'12-12')
print('YES' if match else 'NO')
# -> YES
match = re.fullmatch(r'\d\d\D\d\d', r'Т. 12-12')
print('YES' if match else 'NO')
# -> NO

print(re.split(r'\W+', 'Где, скажите мне, мои очки??!'))
# -> ['Где', 'скажите', 'мне', 'мои', 'очки', '']

print(re.findall(r'\d\d\.\d\d\.\d{4}',
                 r'Эта строка написана 19.01.2018, а могла бы и 01.09.2017'))
# -> ['19.01.2018', '01.09.2017']

for m in re.finditer(r'\d\d\.\d\d\.\d{4}', r'Эта строка написана 19.01.2018, а могла бы и 01.09.2017'):
    print('Дата', m[0], 'начинается с позиции', m.start())
# -> Дата 19.01.2018 начинается с позиции 20
# -> Дата 01.09.2017 начинается с позиции 45

print(re.sub(r'\d\d\.\d\d\.\d{4}',
             r'DD.MM.YYYY',
             r'Эта строка написана 19.01.2018, а могла бы и 01.09.2017'))
# -> Эта строка написана DD.MM.YYYY, а могла бы и DD.MM.YYYY

a = "12e314"
for d in re.findall(r'\d', a):
    d_all = ''
    d_all += d
    print(d_all)